> 
> # Load the df
> df = read.table("analysis.txt", header = TRUE)
> 
> # Some basic properties of the df
> names(df)
 [1] "filename"                       "vertexCount"                   
 [3] "edgeCount"                      "orthogonalWidth"               
 [5] "orthogonalHeight"               "orthogonalComplexity"          
 [7] "orthogonalCompressedWidth"      "orthogonalCompressedHeight"    
 [9] "orthogonalCompressedComplexity" "smoothWidth"                   
[11] "smoothHeight"                   "smoothComplexity"              
[13] "smoothCheapAdjWidth"            "smoothCheapAdjHeight"          
[15] "smoothCheapAdjComplexity"       "smoothAllAdjWidth"             
[17] "smoothAllAdjHeight"             "smoothAllAdjComplexity"        
[19] "smoothNoGWidth"                 "smoothNoGHeight"               
[21] "smoothNoGComplexity"           
> nrow(df)
[1] 844
> sum(df$vertexCount)
[1] 15351
> mean(df$vertexCount)
[1] 18.18839
> sum(df$edgeCount)
[1] 18713
> mean(df$edgeCount)
[1] 22.1718
> 
> # Percentage of graphs between 11 and 20 nodes:
> (sum(df$vertexCount <= 20) - sum(df$vertexCount < 11)) / nrow(df)
[1] 0.7298578
> 
> # Theoretical maximum avg size per vertex, orthogonal:
> mean((df$vertexCount+1)*(df$vertexCount+1)/(df$vertexCount))
[1] 20.25121
> 
> # Avg size per vertex, orthogonal
> mean((df$orthogonalHeight * df$orthogonalWidth) / df$vertexCount)
[1] 4.768246
> 
> # Avg size per vertex, orthogonal with s-edges removed
> mean((df$orthogonalCompressedHeight * df$orthogonalCompressedWidth) / df$vertexCount)
[1] 3.52648
> 
> # Avg size per vertex and avg segment count, smooth-orthogonal
> mean((df$smoothAllAdjHeight * df$smoothAllAdjWidth) / df$vertexCount)
[1] 16.94414
> sum(df$smoothAllAdjComplexity) / sum(df$edgeCount)
[1] 1.193395
> 
> # Avg size per vertex, smooth without G-edges
> mean((df$smoothNoGWidth* df$smoothNoGHeight) / df$vertexCount)
[1] 5.723295
> 
> # Escalation levels
> length(df$smoothComplexity[df$smoothComplexity >= 0])
[1] 734
> length(df$smoothComplexity[df$smoothComplexity < 0])
[1] 110
> length(df$smoothCheapAdjComplexity[df$smoothCheapAdjComplexity < 0])
[1] 1
> 
> # Select the best escalation level for each graph
> escA <- df[df$smoothComplexity >= 0,c("filename", "smoothWidth", "smoothHeight", "smoothComplexity", "vertexCount")]
> escB <- df[df$smoothComplexity < 0 & df$smoothCheapAdjComplexity >= 0,c("filename", "smoothCheapAdjWidth", "smoothCheapAdjHeight", "smoothCheapAdjComplexity", "vertexCount")]
> escC <- df[df$smoothCheapAdjComplexity < 0,c("filename", "smoothAllAdjWidth", "smoothAllAdjHeight", "smoothAllAdjComplexity", "vertexCount")]
> colnames(escA) <- c("filename", "width", "height", "complexity", "vertexCount")
> escA$level <- "A"
> colnames(escB) <- c("filename", "width", "height", "complexity", "vertexCount")
> escB$level <- "B"
> colnames(escC) <- c("filename", "width", "height", "complexity", "vertexCount")
> escC$level <- "C"
> bst <- rbind(escA, escB, escC)
> 
> # Avg size per vertex and avg segment count, smooth-orthogonal, optimal escalation level
> mean((bst$width * bst$height) / bst$vertexCount)
[1] 7.522013
> sum(bst$complexity) / sum(df$edgeCount)
[1] 1.218939
> 
> # Used graph vertex counts
> counts <- rle(sort(df$vertexCount))$values
> 
> # Plot the space efficiency of all graphs
> 
> myplot <- function(offest, color, stuff){
+ lines(stuff, col = color, type="o", pch=4)
+ }
> 
> overviewColramp <- c("red", "brown", "magenta", "cyan", "blue")
> overviewNames <- c("glatt-orthogonal, alle Anpassungen", "glatt-orthogonal, nötige Anpassungen", "glatt-orthogonal, ohne G-Kanten", "orthogonal", "orthogonal, ohne S-Kanten")
> 
> pdf(file="area_comparison.pdf", width=7, height=9, colormodel='cmyk')
> par(fig=c(0,1,0,0.8))
> plot(aggregate((smoothAllAdjWidth* smoothAllAdjHeight) ~ vertexCount, df, mean), type="n", xlab="Knotenanzahl", ylab="Durchschnittliche Fläche")
> grid()
> text(10, 5500, "(b)")
> myplot(5, overviewColramp[1], aggregate((smoothAllAdjWidth* smoothAllAdjHeight) ~ vertexCount, df, mean))
> myplot(0.3, overviewColramp[2], aggregate((width * height) ~ vertexCount, bst, mean))
> myplot(0, overviewColramp[3], aggregate((smoothNoGWidth* smoothNoGHeight) ~ vertexCount, df, mean))
> myplot(0, overviewColramp[4], aggregate((orthogonalWidth* orthogonalHeight) ~ vertexCount, df, mean))
> myplot(-0.3, overviewColramp[5], aggregate((orthogonalCompressedWidth* orthogonalCompressedHeight) ~ vertexCount, df, mean))
> 
> legend(10,5300, overviewNames,lty=1,lwd=2.5,col=overviewColramp, box.col = "white", bg = "white")
> 
> par(fig=c(0,1,0.6,1),new=TRUE)
> plot(table(df$vertexCount), xaxt='n', ylab="Anzahl Graphen")
> grid(ny=NA)
> text(10, 80, "(a)")
> dev.off()
null device 
          1 
> 
> # Show ten worst drawings:
> tail(df[with(df,order((smoothAllAdjWidth*smoothAllAdjHeight)/vertexCount)),], n=10)
      filename vertexCount edgeCount orthogonalWidth orthogonalHeight
613   grafo552          27        33               7               27
676  grafo6491          51        63              13               50
615  grafo5547          33        43              11               33
151  grafo1694          32        41              10               33
585  grafo5215          39        48              10               39
659  grafo6066          36        43               8               36
439  grafo2874          50        60              11               50
95  grafo11463          33        41               9               32
220  grafo2066          33        42              10               32
116   grafo120          40        48               9               39
    orthogonalComplexity orthogonalCompressedWidth orthogonalCompressedHeight
613                  165                         7                         22
676                  315                        13                         42
615                  215                        10                         23
151                  205                         9                         23
585                  240                         9                         27
659                  215                         8                         30
439                  300                        10                         29
95                   205                         9                         29
220                  210                         9                         18
116                  240                         9                         31
    orthogonalCompressedComplexity smoothWidth smoothHeight smoothComplexity
613                            165          51           41               39
676                            315          33           42               78
615                            215          20           27               57
151                            205          54           46               50
585                            240          53           52               55
659                            215          -1           -1               -1
439                            300          59           56               72
95                             205          -1           -1               -1
220                            210          13           18               52
116                            240          -1           -1               -1
    smoothCheapAdjWidth smoothCheapAdjHeight smoothCheapAdjComplexity smoothAllAdjWidth
613                  51                   41                       39                51
676                  33                   42                       78                90
615                  20                   27                       57                62
151                  54                   46                       50                54
585                  53                   52                       55                74
659                  59                   58                       51                61
439                  59                   56                       72                83
95                   37                   29                       53                89
220                  13                   18                       52                50
116                  23                   31                       60               120
    smoothAllAdjHeight smoothAllAdjComplexity smoothNoGWidth smoothNoGHeight
613                 41                     39             15              21
676                 45                     77             33              42
615                 48                     54             20              27
151                 54                     49             16              25
585                 52                     56             17              26
659                 60                     50              9              29
439                 66                     72              9              28
95                  41                     50             37              29
220                 84                     53             13              18
116                 82                     58             23              31
    smoothNoGComplexity
613                  37
676                  78
615                  57
151                  48
585                  53
659                  49
439                  70
95                   53
220                  52
116                  60
> 
> # Show ten worst drawings with best esc. lvl:
> tail(bst[with(bst,order((width*height)/vertexCount)),], n=10)
      filename width height complexity vertexCount level
622  grafo5646    42     40         49          33     A
22  grafo10182    45     42         50          33     A
480  grafo3081    37     36         31          23     A
835  grafo9934    46     44         50          34     A
321   grafo245    37     34         30          21     A
439  grafo2874    59     56         72          50     A
585  grafo5215    53     52         55          39     A
613   grafo552    51     41         39          27     A
151  grafo1694    54     46         50          32     A
659  grafo6066    59     58         51          36     B
> 
> # Show ten best liu-compressed drawings:
> head(df[with(df,order( orthogonalCompressedHeight/orthogonalHeight )),], n=10)
      filename vertexCount edgeCount orthogonalWidth orthogonalHeight
605  grafo5419          35        44              10               34
791   grafo882          26        31               6               25
1   grafo10009          31        37               7               30
90  grafo11401          33        43              11               32
115  grafo1198          29        33               5               28
157   grafo173          26        33               8               26
72  grafo11202          32        39               8               31
471  grafo3025          27        36              10               27
315  grafo2428          19        25               7               19
489  grafo3223          39        48              10               38
    orthogonalComplexity orthogonalCompressedWidth orthogonalCompressedHeight
605                  220                         9                         16
791                  155                         5                         12
1                    185                         7                         15
90                   215                         8                         16
115                  165                         5                         14
157                  165                         8                         13
72                   195                         8                         16
471                  180                         7                         14
315                  125                         7                         10
489                  240                        10                         20
    orthogonalCompressedComplexity smoothWidth smoothHeight smoothComplexity
605                            220          15           16               53
791                            155           5           12               37
1                              185          11           15               41
90                             215          15           16               52
115                            165          10           14               38
157                            165           8           15               42
72                             195          15           16               47
471                            180          28           26               42
315                            125          23           17               33
489                            240          10           20               57
    smoothCheapAdjWidth smoothCheapAdjHeight smoothCheapAdjComplexity smoothAllAdjWidth
605                  15                   16                       53                27
791                   5                   12                       37                19
1                    11                   15                       41                11
90                   15                   16                       52                25
115                  10                   14                       38                10
157                   8                   15                       42                12
72                   15                   16                       47                35
471                  28                   26                       42                28
315                  23                   17                       33                23
489                  10                   20                       57                33
    smoothAllAdjHeight smoothAllAdjComplexity smoothNoGWidth smoothNoGHeight
605                 16                     52             15              16
791                 12                     35              5              12
1                   15                     41             11              15
90                  16                     51             15              16
115                 14                     38             10              14
157                 16                     41              8              15
72                  16                     46             15              16
471                 26                     42              7              13
315                 17                     33              9               9
489                 20                     56             10              20
    smoothNoGComplexity
605                  53
791                  37
1                    41
90                   52
115                  38
157                  42
72                   47
471                  40
315                  31
489                  57
> 
> # Show info about one special graph:
> df[df$filename == "grafo7046",]
     filename vertexCount edgeCount orthogonalWidth orthogonalHeight
700 grafo7046          48        60              13               47
    orthogonalComplexity orthogonalCompressedWidth orthogonalCompressedHeight
700                  300                        12                         33
    orthogonalCompressedComplexity smoothWidth smoothHeight smoothComplexity
700                            300          12           33               74
    smoothCheapAdjWidth smoothCheapAdjHeight smoothCheapAdjComplexity smoothAllAdjWidth
700                  12                   33                       74                45
    smoothAllAdjHeight smoothAllAdjComplexity smoothNoGWidth smoothNoGHeight
700                 33                     71             12              33
    smoothNoGComplexity
700                  74
> 
> # Plot space vs. node count for all methods
> 
> opacity <- 0.7
> 
> noop <- function(...) invisible(NULL)
> myplot2 <- function(agg, filename, color=rgb(0,0,0,opacity), postpro=noop, colormodel='gray'){
+ pdf(file=filename, width=7, height=4.5, colormodel=colormodel)
+ par(mar=c(4,4,0.3,3))
+ plot(x=jitter(agg[,1]),y=agg[,2], xlab="Knotenanzahl", ylab="Fläche", col=color, pch=4, cex=.3, log="xy", ylim=c(9,10000))
+ lines(counts, (counts+1)^2, col=rgb(0,0,0,0.3))
+ lines(counts, (sqrt(counts)+1)^2, col=rgb(0,0,0,0.3))
+ grid()
+ postpro()
+ dev.off()
+ }
> 
> myplot2(data.frame(c(df$vertexCount),c(df$orthogonalWidth*df$orthogonalHeight)), "area_orthogonal.pdf")
null device 
          1 
> myplot2(data.frame(c(df$vertexCount),c(df$orthogonalCompressedWidth*df$orthogonalCompressedHeight)), "area_orthogonal_compressed.pdf")
null device 
          1 
> myplot2(data.frame(c(df$vertexCount),c(df$smoothAllAdjWidth*df$smoothAllAdjHeight)), "area_smooth.pdf")
null device 
          1 
> myplot2(data.frame(c(df$vertexCount),c(df$smoothNoGWidth*df$smoothNoGHeight)), "area_smooth_noG.pdf")
null device 
          1 
> 
> colormap <- c(A=rgb(0,0,0,opacity), B=rgb(0,1,1,opacity), C=rgb(1,0,0,opacity))
> aggBst <- data.frame(c(bst$vertexCount),c(bst$width*bst$height),c(bst$level))
> drawBstLegend <- function() legend(10,11000, c("Keine Anpassungen nötig", "Steigung muss nicht korrigiert werden", "Alle Anpassungen nötig"), pch=4,col=colormap, box.col = "white")
> myplot2(aggBst, "area_smooth_bst.pdf", colormap[aggBst[,3]], drawBstLegend, colormodel='cmyk')
null device 
          1 
> 
> 
> 
> # Check the angels of our drawings
> 
> rangeSq <- log(c(1,10,50,100,501))/log(10)
> pdf(file="angles_comparison.pdf", width=7, height=7, colormodel="cmyk")
> 
> plot(x=NULL,y=NULL,xlim=c(0.1, 3),ylim=c(0.1, 3), xaxt='n', yaxt='n', ylab="", xlab="Anzahl")
> axis(1, at=rangeSq , labels=(10^(rangeSq)))
> for (i in 1:9) {
+ lines(rangeSq*cos(i/18*pi), rangeSq*sin(i/18*pi), type="l", col=rgb(0,0,0,0.3))
+ }
> for (i in rangeSq) {
+ lines(i*cos(0:9/18*pi), i*sin(0:9/18*pi), type="l", col=rgb(0,0,0,0.3))
+ }
> 
> myplot3 <- function(color, width, height) {
+ cnt <- setNames(aggregate(rep(1, nrow(df)), list(round(atan2(height, width)/pi*36)/36*pi), sum), c("angle", "radius"))
+ lines(cos(cnt$angle)*log(cnt$radius)/log(10),sin(cnt$angle)*log(cnt$radius)/log(10), type="o", col=color)
+ }
> 
> myplot3(overviewColramp[1], df$smoothAllAdjWidth, df$smoothAllAdjHeight)
> myplot3(overviewColramp[2], bst$width, bst$height)
> myplot3(overviewColramp[3], df$smoothNoGWidth, df$smoothNoGHeight)
> myplot3(overviewColramp[4], df$orthogonalWidth, df$orthogonalHeight)
> myplot3(overviewColramp[5], df$orthogonalCompressedWidth, df$orthogonalCompressedHeight)
> legend(1.2,3, overviewNames,lty=1,lwd=2.5,col=overviewColramp, box.col = "white")
> 
> dev.off()
null device 
          1 
> 
> 
> 
> 
> # Avg size per vertex when on a square, orthogonal compressed
> mean(pmax(df$orthogonalCompressedWidth,df$orthogonalCompressedHeight)^2/df$vertexCount)
[1] 10.4934
> # Avg size per vertex when on a square, best smooth
> mean(pmax(bst$height,bst$width)^2/bst$vertexCount)
[1] 12.52834
> 
> 
> 
